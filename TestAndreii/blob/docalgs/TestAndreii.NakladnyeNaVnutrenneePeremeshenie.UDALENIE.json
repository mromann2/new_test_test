{
  "script": {
    "title": "script",
    "sources": "function activate(currentDocument) {\r\n    let resultValidate \u003d currentDocument.validate();\r\n    if (resultValidate.hasErrors() || resultValidate.hasValueErrors() ) {\r\n        return  resultValidate;\r\n    }\r\n    \r\n    //Удаляем регистры при снятии с проведения\r\n    let docMnemo \u003d currentDocument.getMnemo();\r\n    let regName \u003d MODULEMNEMO + \u0027.OstatkiTMC\u0027;\r\n    \r\n    let sh_cap \u003d regName + \u0027.dm.Schet\u0027;\r\n    let mol_cap \u003d regName + \u0027.dm.MOL\u0027;\r\n    let skl_cap \u003d regName + \u0027.dm.Sklad\u0027;\r\n    let part_cap \u003d regName + \u0027.dm.Partiya\u0027;\r\n    let tmc_cap \u003d regName + \u0027.dm.TMC\u0027;   \r\n            \r\n    let sh;\r\n    let molDb \u003d currentDocument.get(docMnemo + \u0027.hr.PoluchatelMOL\u0027);\r\n    let sklDb \u003d currentDocument.get(docMnemo + \u0027.hr.Podrazdeleniekuda\u0027);\r\n    let molKr \u003d currentDocument.get(docMnemo + \u0027.hr.OtpravitelMOL\u0027);\r\n    let sklKr \u003d currentDocument.get(docMnemo + \u0027.hr.Podrazdelenieotkuda\u0027);    \r\n    let part;\r\n    let tmc;\r\n    \r\n    req1 \u003d regName + \u0027.rg.VidDvizheniya\u0027;\r\n    \r\n    let condition;\r\n    let myReg;\r\n    \r\n    //ищем в справочнике Партии подменную НУЛЕВУЮ ПАРТИЮ\r\n    let zeroPartia;\r\n    if (EntityFactory.getCatalogs().get(MODULEMNEMO + \".Partii\").findByCode(\"0\").size() \u003e 0) {    \r\n        zeroPartia \u003d EntityFactory.getCatalogs().get(MODULEMNEMO + \".Partii\").findByCode(\"0\").get(0);\r\n    }    \r\n    \r\n    for (let tableRec of currentDocument.getRows()){\r\n         sh \u003d tableRec.get(docMnemo + \u0027.tr.Debet\u0027);\r\n         //получаем партию из аналитики дебета         \r\n         part \u003d getAnaliticFromAccount(sh, \u0027Partii\u0027);         \r\n         if (!part) {\r\n            part \u003d zeroPartia;\r\n         }        \r\n        \r\n         condition \u003d new filter().dimension(sh_cap, sh).and().dimension(mol_cap, molDb).and().dimension(skl_cap, sklDb).and().dimension(part_cap, part).and().dimension(tmc_cap, tmc).and().requisite(req1, docMnemo);\r\n         \r\n         myReg \u003d Register.get(regName);\r\n         myReg.delete(condition);   \r\n         \r\n         sh \u003d tableRec.get(docMnemo + \u0027.tr.Kredit\u0027);\r\n         //получаем партию из аналитики кредита         \r\n         part \u003d getAnaliticFromAccount(sh, \u0027Partii\u0027);         \r\n         if (!part) {\r\n            part \u003d zeroPartia;\r\n         }        \r\n        \r\n         condition \u003d new filter().dimension(sh_cap, sh).and().dimension(mol_cap, molKr).and().dimension(skl_cap, sklKr).and().dimension(part_cap, part).and().dimension(tmc_cap, tmc).and().requisite(req1, docMnemo);\r\n         \r\n         myReg \u003d Register.get(regName);\r\n         myReg.delete(condition);          \r\n    }       \r\n}"
  },
  "template": {
    "universal": false,
    "date": {
      "celltype": "OPERATION_DATE",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "number": {
      "celltype": "OPERATION_NUMBER",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "summ": {
      "celltype": "OPERATION_SUM",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operation_description": {
      "celltype": "OPERATION_DESCRIPTION",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operations": []
  },
  "runastemplate": false,
  "grants": {},
  "meta": {
    "mnemo": "TestAndreii.NakladnyeNaVnutrenneePeremeshenie.UDALENIE",
    "title": {
      "ru_RU": "УДАЛЕНИЕ",
      "en_EN": "UDALENIE"
    },
    "description": {}
  }
}