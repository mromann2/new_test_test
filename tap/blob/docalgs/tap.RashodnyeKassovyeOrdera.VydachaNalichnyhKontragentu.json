{
  "script": {
    "title": "script",
    "sources": "//Проведение документа\r\nfunction activate(currentDocument) {\r\n\r\n    if (!notValid(currentDocument)) {\r\n        for (let tableRec of currentDocument.getRows()){\r\n  \r\n            //создание и заполнение проводок\r\n            \r\n            //1. Проводка Списание денежных средств\r\n            let posting1 \u003d EntityFactory.createPosting();\r\n            let kontragent \u003d currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.Kontragent\u0027)\r\n            let dogovor \u003d currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.Dogovor\u0027)\r\n            let SchetRaschetov \u003d tableRec.get(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027)\r\n            SchetRaschetov.put(0, kontragent);\r\n            SchetRaschetov.put(1, dogovor);\r\n            posting1.setDebit(SchetRaschetov);\r\n            posting1.setCredit(currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.SchetKt\u0027));\r\n            posting1.setValue(tableRec.get(\u0027tap.RashodnyeKassovyeOrdera.tr.Summa\u0027));\r\n            posting1.setComment(currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.Osnovanie\u0027)?.getTitle())\r\n            currentDocument.addPosting(posting1);\r\n          \r\n            //2. Забалансовая проводка\r\n            let posting2 \u003d EntityFactory.createPosting();\r\n            let shetCt2 \u003d EntityFactory.getPlan().getAccounts().findByCode(\u00270000000000000000000НД00000\u0027).get(0);\r\n            posting2.setCredit(shetCt2);\r\n            posting2.setValue(tableRec.get(\u0027tap.RashodnyeKassovyeOrdera.tr.Summa\u0027));\r\n            posting2.setComment(currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.Osnovanie\u0027)?.getTitle());\r\n            currentDocument.addPosting(posting2);\r\n\r\n            //3. Проводка по сч. 17, 18\r\n            let posting3 \u003d EntityFactory.createPosting();\r\n            let  shetCt3;\r\n            let gruppOfKorShet \u003d currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.KorSchet\u0027).getCode().substr(18,3);\r\n            if( gruppOfKorShet \u003d\u003d\u003d \u0027205\u0027 || gruppOfKorShet \u003d\u003d\u003d \u0027209\u0027){\r\n                shetCt3 \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000001734000\u0027).get(0);\r\n            } else {\r\n                shetCt3 \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000001834000\u0027).get(0);\r\n            }\r\n            posting3.setCredit(shetCt3);\r\n            posting3.setValue(tableRec.get(\u0027tap.RashodnyeKassovyeOrdera.tr.Summa\u0027));\r\n            currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.Osnovanie\u0027) \u0026\u0026\r\n            posting3.setComment(currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.Osnovanie\u0027).getTitle());\r\n            currentDocument.addPosting(posting3);\r\n    \r\n            //4. Получено финансового обеспечения\r\n            let organization \u003d EntityFactory.getOrganization();\r\n            if ( currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.tr.FormirovatProvodkiPoIspolneniiuPlanaDohodov\u0027)\r\n                 \u0026\u0026 !organization.isKazennoe() \r\n                 \u0026\u0026 ( gruppOfKorShet \u003d\u003d\u003d \u0027205\u0027 || gruppOfKorShet \u003d\u003d\u003d \u0027209\u0027) \r\n                 \u0026\u0026 tableRec.get(\u0027tap.RashodnyeKassovyeOrdera.tr.KFO\u0027).getCode() !\u003d\u003d \"1\"){\r\n                    let posting4 \u003d EntityFactory.createPosting();\r\n                    let shetDt4 \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000050810000\u0027).get(0)\r\n                    let shetCt4 \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000050710000\u0027).get(0)\r\n                    let RazdelLicevyhSchetov \u003d currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.RazdelLicevyhSchetov\u0027)\r\n                    shetCt4.put(0, RazdelLicevyhSchetov);\r\n                    posting4.setDebit(shetDt4);\r\n                    posting4.setCredit(shetCt4);\r\n                    posting4.setValue(\u0027-\u0027 + tableRec.get(\u0027tap.RashodnyeKassovyeOrdera.tr.Summa\u0027));\r\n                    posting4.setComment(currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.Osnovanie\u0027)?.getTitle())\r\n                     \r\n                    currentDocument.addPosting(posting4);\r\n               }\r\n        };\r\n                \r\n        //устанавливаем текущую дату проводки\r\n        currentDocument.setExecuted();\r\n\r\n        //сохранение документа с проводками\r\n        currentDocument.save();\r\n\r\n        return; \r\n\r\n    } else return notValid(currentDocument);\r\n        \r\n}\r\n\r\n//Снятие документа с проведения\r\nfunction deactivate(currentDocument) {\r\n    currentDocument.removeAllPostings();\r\n    currentDocument.setExecutedDate(null);\r\n    currentDocument.save();\r\n    return;\r\n}\r\n\r\n//Проверка документа на полное заполнение\r\nfunction notValid(currentDocument) { \r\n    let resultValidate \u003d currentDocument.validate();\r\n    let korSchetNotCorrect;\r\n    \r\n     //Документ должен быть оплачен\r\n    if (!currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.Oplacheno\u0027))\r\n        resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.hr.Oplacheno\u0027, \u0027Документ должен быть оплачен\u0027);\r\n    \r\n       //Контрагент должен быть заполнен\r\n    if (!currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.Kontragent\u0027))\r\n        resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.hr.Kontragent\u0027, \u0027Не заполнено обязательное поле\u0027);\r\n\r\n    // Счет кредита должен быть 20134\r\n    if ( currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.SchetKt\u0027) \u0026\u0026\r\n        currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.SchetKt\u0027).getCode().substr(18,5) !\u003d\u003d \u002720134\u0027) \r\n            resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.hr.SchetKt\u0027, \u0027Счет должен принимать значение 201.34\u0027);\r\n    \r\n    //Допустимые группы счетов данного алгоритма\r\n    if (currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.KorSchet\u0027)){\r\n        let korSchet \u003d currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.KorSchet\u0027).getCode().substr(18,3);\r\n        if ( korSchet !\u003d\u003d \u0027205\u0027 \u0026\u0026 korSchet !\u003d\u003d \u0027206\u0027 \u0026\u0026 korSchet !\u003d\u003d \u0027209\u0027 \u0026\u0026 korSchet !\u003d\u003d \u0027302\u0027 ){\r\n                korSchetNotCorrect \u003d true\r\n                resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.hr.KorSchet\u0027, \u0027Должен относиться к 205.00, 206.00, 209.00 либо 302.00 группе счетов.\u0027);\r\n        }\r\n    } \r\n    \r\n    //Заполнена табличная часть\r\n    if (!currentDocument.getRows().size()){\r\n        resultValidate.addValueError(\u0027Не заполнена табличная часть документа.\u0027);\r\n    } else {\r\n            let tableSum \u003d 0;\r\n            let docSum \u003d +currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.Summa\u0027)\r\n\r\n            for (let tableRec of currentDocument.getRows()){\r\n\r\n                //Заполнен счет в табличной части\r\n                if (!tableRec.get(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027)){\r\n                      resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027, \u0027Не заполнено обязательное поле в табличной части.\u0027);\r\n                //Следующие проверки производятся при условии заполненного кор.счета\r\n                } else if (currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.KorSchet\u0027)){\r\n\r\n                    const korSchet \u003d currentDocument.get(\u0027tap.RashodnyeKassovyeOrdera.hr.KorSchet\u0027);\r\n                    const schetRaschetov \u003d tableRec.get(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027);\r\n                    const korShetIsSubGroupp \u003d korSchet.getCode().substr(22,1) \u003d\u003d\u003d \u00270\u0027;\r\n                    const notInGrupp \u003d korSchet.getCode().substr(18,4) !\u003d\u003d tableRec.get(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027).getCode().substr(18,4);\r\n\r\n                    //проверки на соответствие корсчета(если выбрана группа) и счета расчетов\r\n                    if (!korSchetNotCorrect \u0026\u0026 korSchet.getCode().substr(21,2) \u003d\u003d\u003d \"00\"){\r\n                        if ( (korSchet.getCode().substr(18,3) \u003d\u003d\u003d \u0027205\u0027 || korSchet.getCode().substr(18,3) \u003d\u003d\u003d \u0027209\u0027) \u0026\u0026\r\n                                  (schetRaschetov.getCode().substr(18,3) !\u003d\u003d \u0027205\u0027 \u0026\u0026 schetRaschetov.getCode().substr(18,3) !\u003d\u003d \u0027209\u0027) ){\r\n                                      resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027, \u0027 При указанном кор.счете счет расчетов должен относиться к группам 205 или 209.\u0027)\r\n                        } else if ( (korSchet.getCode().substr(18,3) \u003d\u003d\u003d \u0027206\u0027) \u0026\u0026 schetRaschetov.getCode().substr(18,3) !\u003d\u003d \u0027206\u0027){\r\n                                      resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027, \u0027 При указанном кор.счете счет расчетов должен относиться к группе 206.\u0027)\r\n                        } else if ( (korSchet.getCode().substr(18,3) \u003d\u003d\u003d \u0027302\u0027) \u0026\u0026 schetRaschetov.getCode().substr(18,3) !\u003d\u003d \u0027302\u0027){\r\n                                      resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027, \u0027 При указанном кор.счете счет расчетов должен относиться к группе 302.\u0027)\r\n                        // счет расчетов не может быть группой/подгруппой счетов\r\n                        } else if (schetRaschetov.getCode().substr(22,1) \u003d\u003d\u003d \u00270\u0027){\r\n                              resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027, \u0027В проводке не может быть использована группа или подгруппа счетов, необходимо указать субсчет.\u0027)\r\n                        }   \r\n                    //проверки при условии если выбрана подгруппа\r\n                    } else if (korShetIsSubGroupp){\r\n                        //соответствие счета расчетов подгруппе указанной в корсчете\r\n                        if (korSchet \u0026\u0026 !korSchetNotCorrect \u0026\u0026 notInGrupp){\r\n                               resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027, \u0027Должен относиться к подгруппе указанной в поле \"Кор.счет\".\u0027)\r\n                        //счет расчетов не может быть подгруппой счетов    \r\n                        }else if (schetRaschetov.getCode().substr(22,1) \u003d\u003d\u003d \u00270\u0027){\r\n                              resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027, \u0027В проводке не может быть использована подгруппа счетов, необходимо указать субсчет.\u0027)\r\n                        }\r\n                    //если в корсчете выбран конкретный счет, он должен совпадать с счетом расчетов        \r\n                    } else if (korSchet \u0026\u0026  !korSchetNotCorrect \u0026\u0026 (schetRaschetov.getCode() !\u003d\u003d korSchet.getCode())){ \r\n                          resultValidate.addValueError(\u0027tap.RashodnyeKassovyeOrdera.tr.SchetRaschetov\u0027, \u0027Должен совпадать со значением поля \"Кор. счет\".\u0027);\r\n                    }\r\n                }\r\n                tableSum +\u003d +tableRec.get(\u0027tap.RashodnyeKassovyeOrdera.tr.Summa\u0027);\r\n\r\n            }\r\n\r\n            // сумма в шапке ровняется сумме всех строк\r\n            if (tableSum.toFixed(2) !\u003d\u003d docSum.toFixed(2))\r\n                resultValidate.addValueError(`Сумма(всего) (${docSum.toFixed(2)}) не совпадает с суммой строк в табличной части (${tableSum.toFixed(2)})`);\r\n\r\n    } \r\n    \r\n    if (resultValidate.hasErrors() || resultValidate.hasValueErrors() ) \r\n        return  resultValidate;\r\n}"
  },
  "template": {
    "universal": false,
    "date": {
      "celltype": "OPERATION_DATE",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "number": {
      "celltype": "OPERATION_NUMBER",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "summ": {
      "celltype": "OPERATION_SUM",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operation_description": {
      "celltype": "OPERATION_DESCRIPTION",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operations": []
  },
  "runastemplate": false,
  "grants": {},
  "meta": {
    "mnemo": "tap.RashodnyeKassovyeOrdera.VydachaNalichnyhKontragentu",
    "title": {
      "ru_RU": "Выдача наличных контрагенту",
      "en_EN": "Vydacha nalichnyh kontragentu"
    },
    "description": {}
  }
}