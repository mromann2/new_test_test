{
  "script": {
    "title": "script",
    "sources": "//Поступление наличных д/с от подотчетного лица\r\nfunction activate(currentDocument) {\r\n\r\n    if (!notValid(currentDocument)) {\r\n\r\n        if(currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.Oplacheno\u0027)){\r\n            \r\n            let korSchet \u003d currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.KorSchet\u0027);\r\n            for (let tableRec of currentDocument.getRows()){\r\n                let posDebit \u003d posCredit \u003d \u0027\u0027;\r\n                let posValue \u003d tableRec.get(\u0027tap.PrihodnyeKassovyeOrdera.tr.Summa\u0027);\r\n                let posComment \u003d currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.Osnovanie\u0027);\r\n\r\n                if (currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.Oplacheno\u0027)){\r\n\r\n//              Основная проводка\r\n                    posDebit \u003d currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.SchetDt\u0027);\r\n                    posCredit \u003d korSchet;\r\n                        if (currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.Kontragent\u0027))\r\n                            posCredit.put(0, currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.Kontragent\u0027));\r\n                    createPosting();\r\n                    posCredit \u003d \u0027\u0027;\r\n\r\n//              Забалансовая проводка\r\n                    posDebit \u003d EntityFactory.getPlan().getAccounts().findByCode(\u00270000000000000000000НД00000\u0027).get(0);\r\n                    createPosting();\r\n\r\n                    if (currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.VozvratProshlyhLet\u0027)){\r\n                        \r\n//              Проводка по счету 17 (возврат прошлых лет)\r\n                        posDebit \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000001734000\u0027).get(0);\r\n                        createPosting();\r\n                        \r\n//              Возврат прошлых лет\r\n                        posDebit \u003d EntityFactory.getPlan().getAccounts().findByCode(\u0027000000000000000000ВПЛ34000\u0027).get(0);\r\n                        posComment \u003d \u0027Возврат прошлых лет\u0027;\r\n                        createPosting();\r\n                        posComment \u003d currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.Osnovanie\u0027);\r\n                        \r\n                    } else {\r\n                        \r\n//              Проводка по счету 18\r\n                        posDebit \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000001834000\u0027).get(0);\r\n                        createPosting();\r\n                        \r\n                    }\r\n                }\r\n\r\n//          Общая функция создания и заполнения проводки\r\n                function createPosting() {\r\n                    let posting \u003d EntityFactory.createPosting();\r\n                    if (posDebit)\r\n                        posting.setDebit(posDebit);\r\n                    if (posCredit)\r\n                        posting.setCredit(posCredit);\r\n                    if (posValue)\r\n                        posting.setValue(posValue);\r\n                    if (posComment)\r\n                        posting.setComment(posComment);\r\n                    currentDocument.addPosting(posting);\r\n                    return;\r\n                }\r\n            }\r\n        }    \r\n    \r\n        currentDocument.setExecuted();\r\n        currentDocument.save();\r\n        \r\n        return;  \r\n    \r\n    } else \r\n        return notValid(currentDocument);\r\n}\r\n\r\n//Снятие документа с проведения\r\nfunction deactivate(currentDocument) {\r\n    currentDocument.removeAllPostings();\r\n    currentDocument.setExecutedDate(null);\r\n    currentDocument.save();\r\n    return;\r\n}\r\n\r\n//Проверка документа на полное заполнение\r\nfunction notValid(currentDocument) {\r\n    let resultValidate \u003d currentDocument.validate();\r\n    \r\n    if (!currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.Oplacheno\u0027))\r\n            resultValidate.addValueError(\u0027tap.PrihodnyeKassovyeOrdera.hr.Oplacheno\u0027, \u0027Для проведения ордер должен быть оплачен.\u0027);\r\n\r\n    if( !currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.Kontragent\u0027) )\r\n        resultValidate.addValueError(\u0027tap.PrihodnyeKassovyeOrdera.hr.Kontragent\u0027, \u0027Не заполнено обязательное поле.\u0027);\r\n        \r\n    if (currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.SchetDt\u0027) \u0026\u0026\r\n        currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.SchetDt\u0027).getCode().substr(18,5) !\u003d \u002720134\u0027)\r\n            resultValidate.addValueError(\u0027Счет Дт должен принимать значение 201.34\u0027);\r\n                    \r\n    if (currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.KorSchet\u0027) \u0026\u0026\r\n        currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.KorSchet\u0027).getCode().substr(18,3) !\u003d \u0027208\u0027)\r\n            resultValidate.addValueError(\u0027tap.PrihodnyeKassovyeOrdera.hr.KorSchet\u0027, \u0027Счет должен относиться к группе счетов 208.00.\u0027);\r\n\r\n    if (!currentDocument.getRows().size())\r\n        resultValidate.addValueError(\u0027Не заполнена табличная часть документа.\u0027);\r\n    else {\r\n        let sum \u003d currentDocument.get(\u0027tap.PrihodnyeKassovyeOrdera.hr.Summa\u0027);\r\n        let sumChek \u003d 0.00;\r\n\r\n        for (let tableRec of currentDocument.getRows()){\r\n            sumChek +\u003d +tableRec.get(\u0027tap.PrihodnyeKassovyeOrdera.tr.Summa\u0027);\r\n        }\r\n\r\n//      сумма документа \u003d сумме из строк\r\n        if (+sumChek.toFixed(2) !\u003d +sum)\r\n            resultValidate.addValueError(\u0027tap.PrihodnyeKassovyeOrdera.hr.Summa\u0027, \u0027Сумма документа не совпадает с суммой в табличной части.\u0027);\r\n    }\r\n    \r\n    if (resultValidate.hasErrors() || resultValidate.hasValueErrors()) \r\n        return  resultValidate;\r\n}"
  },
  "template": {
    "universal": false,
    "date": {
      "celltype": "OPERATION_DATE",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "number": {
      "celltype": "OPERATION_NUMBER",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "summ": {
      "celltype": "OPERATION_SUM",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operation_description": {
      "celltype": "OPERATION_DESCRIPTION",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operations": []
  },
  "runastemplate": false,
  "grants": {},
  "meta": {
    "mnemo": "tap.PrihodnyeKassovyeOrdera.PostuplenieNalichnyhDsOtPodotchetnogoLica",
    "title": {
      "ru_RU": "Поступление наличных д/с от подотчетного лица",
      "en_EN": "Postuplenie nalichnyh ds ot podotchetnogo lica"
    },
    "description": {}
  }
}