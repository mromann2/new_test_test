{
  "script": {
    "title": "script",
    "sources": "//Проведение документа\r\nfunction activate(currentDocument) {\r\n//return currentDocument;\r\n    if (!notValid(currentDocument)) {\r\n        let statement \u003d currentDocument.get(\u0027tap.AvansovyeOtchety.hr.ZayavlenieNaVydachuAvansa\u0027);\r\n        let persAccSection \u003d statement ? statement.get(\u0027tap.ZayavleniyaNaVydachuAvansa.hr.RazdelLicevogoScheta\u0027) : \r\n            currentDocument.get(\u0027tap.AvansovyeOtchety.hr.RazdelLicevogoScheta\u0027);\r\n        let commitment \u003d statement ? statement.get(\u0027tap.ZayavleniyaNaVydachuAvansa.hr.Obyazatelstvo\u0027) : \r\n            currentDocument.get(\u0027tap.AvansovyeOtchety.hr.OsnovaniePrinyatiyaObyazatelstva\u0027);\r\n        \r\n\r\n        // 1. Сторнирование проводки из заявления по 50211-50212 счетам\r\n        if (statement) {\r\n            let statementPostings \u003d statement.getPostingList();\r\n            for (let statementPosting of statementPostings) {\r\n                let posting \u003d EntityFactory.createPosting();\r\n                posting.setComment( statementPosting.getComment() );\r\n                posting.setValue( \u0027-\u0027 + statementPosting.getValue() );\r\n                posting.setDebit( statementPosting.getDebit() );\r\n                posting.setCredit( statementPosting.getCredit() );\r\n                currentDocument.addPosting(posting);\r\n            }\r\n        }\r\n        \r\n        for (let tableRec of currentDocument.getRows()){\r\n            \r\n        //2. Корректировка денежных обязательст\r\n            let posting \u003d EntityFactory.createPosting();\r\n            posting.setComment(\u0027Корректировка денежных обязательств\u0027);\r\n            posting.setValue(tableRec.get(\u0027tap.AvansovyeOtchety.tr.PrinyatoKUchetu\u0027));\r\n                //счет дб 50211\r\n            let debit \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000050211000\u0027).get(0); //TO DO: КПС должен браться из КПС(Кт)\r\n            debit.put(0, persAccSection); //Аналитика 1: Разделы лиц счетов\r\n            debit.put(1, commitment); //Аналитика 2: Принятые обязательства\r\n            posting.setDebit(debit);\r\n                //счет кр 50212\r\n            let credit \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000050212000\u0027).get(0);\r\n            credit.put(0, persAccSection); //Аналитика 1: Разделы лиц счетов\r\n            credit.put(1, commitment); //Аналитика 2: Принятые обязательства\r\n            posting.setCredit(credit);\r\n\r\n            currentDocument.addPosting(posting);\r\n        \r\n        \r\n        //3.Расходы подотчетного лица\r\n            let posting3 \u003d EntityFactory.createPosting();\r\n            posting3.setComment(tableRec.get(\u0027tap.AvansovyeOtchety.tr.KomuZaCHtoIPoKakomuDokumentuUplacheno\u0027));\r\n            posting3.setValue(tableRec.get(\u0027tap.AvansovyeOtchety.tr.PrinyatoKUchetu\u0027));\r\n                //счет дб\r\n            posting3.setDebit(tableRec.get(\u0027tap.AvansovyeOtchety.tr.SchetDebeta\u0027));\r\n\r\n                //счет кр\r\n            let credit3 \u003d tableRec.get(\u0027tap.AvansovyeOtchety.tr.SchetKredita\u0027);\r\n            credit.put(0, currentDocument.get(\u0027tap.AvansovyeOtchety.hr.Sotrudnik\u0027)); //Аналитика 1: КэК\r\n            posting3.setCredit(credit);\r\n\r\n            currentDocument.addPosting(posting);\r\n        \r\n        }\r\n        \r\n        \r\n        \r\n        //Дополнительные проводки в том случае, если имеется заявление-основание\r\n        if (currentDocument.get(\u0027tap.AvansovyeOtchety.hr.ZayavlenieNaVydachuAvansa\u0027)) {\r\n            let statement \u003d currentDocument.get(\u0027tap.AvansovyeOtchety.hr.ZayavlenieNaVydachuAvansa\u0027);\r\n            let commitment \u003d statement.get(\u0027tap.ZayavleniyaNaVydachuAvansa.hr.Obyazatelstvo\u0027);\r\n            let persAccSection \u003d statement.get(\u0027tap.ZayavleniyaNaVydachuAvansa.hr.RazdelLicevogoScheta\u0027);\r\n\r\n            // 1. Сторнирование проводки из заявления\r\n            let statementPostings \u003d currentDocument.get(\u0027tap.AvansovyeOtchety.hr.ZayavlenieNaVydachuAvansa\u0027).getPostingList();\r\n            for (let statementPosting of statementPostings) {\r\n                let posting \u003d EntityFactory.createPosting();\r\n                posting.setComment( statementPosting.getComment() );\r\n                posting.setValue( \u0027-\u0027 + statementPosting.getValue() );\r\n                posting.setDebit( statementPosting.getDebit() );\r\n                posting.setCredit( statementPosting.getCredit() );\r\n                currentDocument.addPosting(posting);\r\n            }\r\n            \r\n            for (let tableRec of currentDocument.getRows()){\r\n            //2. Корректировка денежных обязательст (полные счета из проводок завяления взяты)\r\n                let posting \u003d EntityFactory.createPosting();\r\n                posting.setComment(\u0027Корректировка денежных обязательств\u0027);\r\n                posting.setValue(tableRec.get(\u0027tap.AvansovyeOtchety.tr.PrinyatoKUchetu\u0027));\r\n                    //счет дб 50211\r\n                let debit \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000050211000\u0027).get(0);\r\n                debit.put(0, persAccSection); //Аналитика 1: Разделы лиц счетов\r\n                debit.put(1, commitment); //Аналитика 2: Принятые обязательства\r\n                posting.setDebit(debit);\r\n                    //счет кр 50212\r\n                let credit \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000050212000\u0027).get(0);\r\n                credit.put(0, persAccSection); //Аналитика 1: Разделы лиц счетов\r\n                credit.put(1, commitment); //Аналитика 2: Принятые обязательства\r\n                posting.setCredit(credit);\r\n\r\n                currentDocument.addPosting(posting);\r\n            };\r\n        } else {\r\n            //2. Корректировка денежных обязательст ()\r\n            let posting \u003d EntityFactory.createPosting();\r\n            posting.setComment(\u0027Корректировка денежных обязательств\u0027);\r\n            posting.setValue(tableRec.get(\u0027tap.AvansovyeOtchety.tr.PrinyatoKUchetu\u0027));\r\n                //счет дб 50211\r\n            let debit \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000050211000\u0027).get(0);\r\n            debit.put(0, persAccSection); //Аналитика 1: Разделы лиц счетов\r\n            debit.put(1, commitment); //Аналитика 2: Принятые обязательства\r\n            posting.setDebit(debit);\r\n                //счет кр 50212\r\n            let credit \u003d EntityFactory.getPlan().getAccounts().findByCode(\u002700000000000000000050212000\u0027).get(0);\r\n            credit.put(0, persAccSection); //Аналитика 1: Разделы лиц счетов\r\n            credit.put(1, commitment); //Аналитика 2: Принятые обязательства\r\n            posting.setCredit(credit);\r\n\r\n            currentDocument.addPosting(posting);\r\n            \r\n            \r\n        }\r\n        \r\n        for (let tableRec of currentDocument.getRows()){\r\n        \r\n            //3.Расходы подотчетного лица\r\n            let posting \u003d EntityFactory.createPosting();\r\n            posting.setComment(tableRec.get(\u0027tap.AvansovyeOtchety.tr.KomuZaCHtoIPoKakomuDokumentuUplacheno\u0027));\r\n            posting.setValue(tableRec.get(\u0027tap.AvansovyeOtchety.tr.PrinyatoKUchetu\u0027));\r\n                //счет дб\r\n            posting.setDebit(tableRec.get(\u0027tap.AvansovyeOtchety.tr.SchetDebeta\u0027));\r\n\r\n                //счет кр\r\n            let credit \u003d tableRec.get(\u0027tap.AvansovyeOtchety.tr.SchetKredita\u0027);\r\n            credit.put(0, currentDocument.get(\u0027tap.AvansovyeOtchety.hr.Sotrudnik\u0027)); //Аналитика 1: КэК\r\n            posting.setCredit(credit);\r\n\r\n            currentDocument.addPosting(posting);\r\n        \r\n        \r\n            // Налоговый учет\r\n            let postingNU \u003d EntityFactory.createPosting();\r\n            postingNU.setComment(tableRec.get(\u0027tap.AvansovyeOtchety.tr.KomuZaCHtoIPoKakomuDokumentuUplacheno\u0027));\r\n            postingNU.setValue(tableRec.get(\u0027tap.AvansovyeOtchety.tr.PrinyatoKUchetu\u0027));\r\n                //счет дб\r\n            postingNU.setDebit(tableRec.get(\u0027tap.AvansovyeOtchety.tr.SchetDebeta\u0027));\r\n\r\n                //счет кр 50212\r\n            let creditNU \u003d tableRec.get(\u0027tap.AvansovyeOtchety.tr.SchetKredita\u0027);\r\n            creditNU.put(0, currentDocument.get(\u0027tap.AvansovyeOtchety.hr.Sotrudnik\u0027)); //Аналитика 1: КэК\r\n            postingNU.setCredit(creditNU);\r\n\r\n            currentDocument.addPosting(posting);\r\n        \r\n        };\r\n                \r\n        \r\n        \r\n        currentDocument.setExecuted();\r\n        currentDocument.save();\r\n    \r\n        return;  \r\n    } else \r\n        return notValid(currentDocument);\r\n}\r\n\r\n//Снятие документа с проведения\r\nfunction deactivate(currentDocument) {\r\n    currentDocument.removeAllPostings();\r\n    currentDocument.setExecutedDate(null);\r\n    currentDocument.save();\r\n    return;\r\n}\r\n\r\n//Проверка документа на полное заполнение\r\nfunction notValid(currentDocument) { \r\n    let resultValidate \u003d currentDocument.validate();\r\n \r\n    if (!currentDocument.getRows().size()){\r\n        resultValidate.addValueError(\u0027Не заполнена табличная часть документа.\u0027);\r\n    }\r\n    \r\n    if (!resultValidate.hasErrors()) {\r\n        /*for (let tableRec of currentDocument.getRows()){\r\n            if (tableRec.get(\u0027tap.AvansovyeOtchety.tr.SchetKredita\u0027).getCode().substr(18,3) !\u003d\u003d \u0027208\u0027)\r\n                resultValidate.addValueError(\u0027tap.AvansovyeOtchety.tr.SchetKredita\u0027, tableRec.get(\u0027tap.AvansovyeOtchety.tr.SchetKredita\u0027).getCode().substr(18,3) + \u0027Номер счета в поле \"Счет Кредита\" в табличной части должен принадлежать группе счетов 208\u0027);\r\n            \r\n        }*/\r\n    }\r\n\r\n    if (resultValidate.hasErrors() || resultValidate.hasValueErrors() ) \r\n        return  resultValidate;\r\n}"
  },
  "template": {
    "universal": false,
    "date": {
      "celltype": "OPERATION_DATE",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "number": {
      "celltype": "OPERATION_NUMBER",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "summ": {
      "celltype": "OPERATION_SUM",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operation_description": {
      "celltype": "OPERATION_DESCRIPTION",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operations": []
  },
  "runastemplate": false,
  "grants": {},
  "meta": {
    "mnemo": "tap.AvansovyeOtchety.Standartnyii",
    "title": {
      "ru_RU": "Стандартный",
      "en_EN": "Standartnyii"
    },
    "description": {}
  }
}