{
  "script": {
    "title": "script",
    "sources": "//Проведение документа\r\nfunction activate(currentDocument) {\r\n    //проверка документа\r\n    let validationResult \u003d notValid(currentDocument);\r\n    if (validationResult) {\r\n        return validationResult;\r\n    }\r\n    let docMnemo \u003d currentDocument.getMnemo();\r\n    for (let tableRec of currentDocument.getRows()){\r\n        let stoimost \u003d tableRec.get(docMnemo + \u0027.tr.Stoimost\u0027);\r\n        let amortizaciya \u003d tableRec.get(docMnemo + \u0027.tr.Amortizaciya\u0027);\r\n        let ubytokOtObesceneniya \u003d tableRec.get(docMnemo + \u0027.tr.UbytokOtObesceneniya\u0027);\r\n        let creditAccount \u003d tableRec.get(docMnemo + \u0027.tr.Kredit\u0027);\r\n        let vtoroiiSchet \u003d tableRec.get(docMnemo +  \u0027.tr.VtoroiiSchet\u0027);\r\n        //остаточная стоимость \u003d стоимость - амортизация - убыток обесценения\r\n        let ostStoimost \u003d stoimost - amortizaciya - ubytokOtObesceneniya;\r\n        \r\n        //1. проводка по остаточной стоймости\r\n        if (ostStoimost \u003e 0) {\r\n            currentDocument.addPosting(createPostingWithProps({\r\n                tableRec,\r\n                currentDocument,\r\n                summa: ostStoimost,\r\n                vnePeriod: true\r\n            }));\r\n        }\r\n        \r\n        //2. проводка по сумме амортизации\r\n        if (amortizaciya \u003e 0) {\r\n            currentDocument.addPosting(createPostingWithProps({\r\n                tableRec,\r\n                currentDocument,\r\n                debitKps: tableRec.get(docMnemo +  \u0027.tr.KPSKr\u0027).getCode(),\r\n                debit: fillAccountByAnalytics(getLinkedAccount(creditAccount, \u0027SchetAmortizacii\u0027), creditAccount),\r\n                summa: amortizaciya,\r\n                vnePeriod: true\r\n            }));\r\n        }\r\n        \r\n        //3. проводка по убытку от обесценения\r\n        if (ubytokOtObesceneniya \u003e 0) {\r\n            currentDocument.addPosting(createPostingWithProps({\r\n                tableRec,\r\n                currentDocument,\r\n                debitKps: tableRec.get(docMnemo +  \u0027.tr.KPSKr\u0027).getCode(),\r\n                debit: fillAccountByAnalytics(getLinkedAccount(creditAccount, \u0027SchetObesceneniya\u0027), creditAccount),\r\n                summa: ubytokOtObesceneniya,\r\n                vnePeriod: true\r\n            }));\r\n        }\r\n        \r\n        //4. проводка на второй счет для ОС\r\n        if (vtoroiiSchet) {\r\n            currentDocument.addPosting(createPostingWithProps({\r\n                tableRec,\r\n                currentDocument,\r\n                debitKps: \u002700000000000000000\u0027,\r\n                debit: EntityFactory.getPlan().getAccounts().findByCode(\u002700000\u0027).get(0),\r\n                debitKosgu: \u0027000\u0027,\r\n                credit: fillAccountByAnalytics(vtoroiiSchet, creditAccount),\r\n                creditKosgu: \u0027000\u0027,\r\n                summa: stoimost,\r\n                vnePeriod: true\r\n            }));\r\n        }\r\n        \r\n    }\r\n    //проверка проводок\r\n    let postingValidationResult \u003d hasNotValidPostings(currentDocument);\r\n    if (postingValidationResult) {\r\n        return postingValidationResult;\r\n    }\r\n    //устанавливаем признак проведениея и текущую дату\r\n    currentDocument.setExecuted();\r\n    //устанавливаем сумму операции\r\n    currentDocument.setOperationSum(getCalculatedSum(currentDocument, docMnemo + \u0027.tr.Stoimost\u0027) - \r\n                                    getCalculatedSum(currentDocument, docMnemo + \u0027.tr.Amortizaciya\u0027) - \r\n                                    getCalculatedSum(currentDocument, docMnemo + \u0027.tr.UbytokOtObesceneniya\u0027));\r\n    //сохранение документа с проводками\r\n    currentDocument.save();\r\n}"
  },
  "template": {
    "universal": false,
    "date": {
      "celltype": "OPERATION_DATE",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "number": {
      "celltype": "OPERATION_NUMBER",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "summ": {
      "celltype": "OPERATION_SUM",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operation_description": {
      "celltype": "OPERATION_DESCRIPTION",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operations": []
  },
  "runastemplate": false,
  "grants": {},
  "meta": {
    "mnemo": "Razrabotka.AktSpisaniyaOS.SpisanieVMezhraschetnyiiPeriod",
    "title": {
      "ru_RU": "Списание в межрасчетный период",
      "en_EN": "Spisanie v mezhraschetnyii period"
    },
    "description": {}
  }
}