{
  "script": {
    "title": "script",
    "sources": "//Проведение документа\r\nfunction activate(currentDocument) {\r\n    //проверка документа\r\n    let validationResult \u003d notValid(currentDocument);\r\n    if (validationResult) {\r\n        return validationResult;\r\n    }\r\n    let docMnemo \u003d currentDocument.getMnemo();\r\n    for (let tableRec of currentDocument.getRows()){\r\n        //     Проводка 1 - по фактуре, сумма \u003d стоимость\r\n        currentDocument.addPosting(createPostingWithProps({tableRec, currentDocument, summa: tableRec.get(docMnemo + \u0027.tr.Stoimost\u0027)}));\r\n        \r\n        //     Проводка 2 - условие \u003d сумма амортизации больше 0\r\n        //        Дебет \u003d Счет амортизации для счета кредит из соответствия,\r\n        //                       КПС\u003dКПС кредит, КОСГУ\u003dКОСГУ дебет из плана, аналитика\u003dиз кредит\r\n        //        Кредит \u003d Счет амортизации для счета дебет из  соответствия,\r\n        //                       КПС\u003dКПС дебет, КОСГУ\u003dКОСГУ кредит из плана, аналитика\u003dиз дебет\r\n        let resultValidate \u003d currentDocument.validate();\r\n        let debit  \u003d getLinkedAccount(tableRec.get(docMnemo + \u0027.tr.Kredit\u0027), \u0027SchetAmortizacii\u0027, true, resultValidate);\r\n        let credit \u003d getLinkedAccount(tableRec.get(docMnemo + \u0027.tr.Debet\u0027) , \u0027SchetAmortizacii\u0027, true, resultValidate);\r\n        if (resultValidate.hasErrors() || resultValidate.hasValueErrors()) {\r\n            return resultValidate;\r\n        }\r\n        if (tableRec.get(docMnemo + \u0027.tr.Amortizaciya\u0027) \u003e 0) {\r\n            currentDocument.addPosting(createPostingWithProps({tableRec, \r\n                        currentDocument,\r\n                        debit,\r\n                        debitKps: tableRec.get(docMnemo + \u0027.tr.KPSKr\u0027)?.getCode(),\r\n                        credit,\r\n                        creditKps: tableRec.get(docMnemo + \u0027.tr.KPSDb\u0027)?.getCode(),\r\n                        summa: tableRec.get(docMnemo + \u0027.tr.Amortizaciya\u0027)\r\n                       }));\r\n        }\r\n    }\r\n   \r\n    //проверка проводок\r\n    let postingValidationResult \u003d hasNotValidPostings(currentDocument);\r\n    if (postingValidationResult) {\r\n        return postingValidationResult;\r\n    }\r\n    //устанавливаем признак проведения и текущую дату\r\n    currentDocument.setExecuted();\r\n    //устанавливаем сумму операции\r\n    currentDocument.setOperationSum(getCalculatedSum(currentDocument, docMnemo + \u0027.tr.Stoimost\u0027));\r\n    //сохранение документа с проводками\r\n    currentDocument.save();\r\n}"
  },
  "template": {
    "universal": false,
    "date": {
      "celltype": "OPERATION_DATE",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "number": {
      "celltype": "OPERATION_NUMBER",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "summ": {
      "celltype": "OPERATION_SUM",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operation_description": {
      "celltype": "OPERATION_DESCRIPTION",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operations": []
  },
  "runastemplate": false,
  "grants": {},
  "meta": {
    "mnemo": "Razrabotka.SmenaSchetaOS.SmenaScheta",
    "title": {
      "ru_RU": "Смена счета",
      "en_EN": "Smena scheta"
    },
    "description": {}
  }
}