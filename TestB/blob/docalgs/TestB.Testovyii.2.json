{
  "script": {
    "title": "script",
    "sources": "//Проведение документа\r\nfunction activate(currentDocument) {\r\n    //проверка документа\r\n    let validationResult \u003d notValid(currentDocument);\r\n    if (validationResult) {\r\n        return validationResult;\r\n    }\r\n    \r\n    for (let tableRec of currentDocument.getRows()){\r\n        //создание и заполнение проводки\r\n        let posting \u003d EntityFactory.createPosting();\r\n        \r\n        if(tableRec.get(\u0027Razrabotka.Testovyii.tr.KVFO\u0027))\r\n            posting.setProperty(KFO, tableRec.get(\u0027Razrabotka.Testovyii.tr.KVFO\u0027)[0]);\r\n        if(tableRec.get(\u0027Razrabotka.Testovyii.tr.Debet\u0027))\r\n            posting.setDebit(tableRec.get(\u0027Razrabotka.Testovyii.tr.Debet\u0027));\r\n        if(tableRec.get(\u0027Razrabotka.Testovyii.tr.KPSDb\u0027))\r\n            posting.setDebitProperty(KPS, tableRec.get(\u0027Razrabotka.Testovyii.tr.KPSDb\u0027).getCode());\r\n        if(tableRec.get(\u0027Razrabotka.Testovyii.tr.Kredit\u0027))\r\n            posting.setCredit(tableRec.get(\u0027Razrabotka.Testovyii.tr.Kredit\u0027));\r\n        if(tableRec.get(\u0027Razrabotka.Testovyii.tr.KPSKr\u0027))\r\n            posting.setCreditProperty(KPS, tableRec.get(\u0027Razrabotka.Testovyii.tr.KPSKr\u0027).getCode());\r\n        if(tableRec.get(\u0027Razrabotka.Testovyii.tr.Summa\u0027))\r\n            posting.setValue(tableRec.get(\u0027Razrabotka.Testovyii.tr.Summa\u0027));\r\n        if(tableRec.get(\u0027Razrabotka.Testovyii.tr.Operaciya\u0027))\r\n            posting.setComment(tableRec.get(\u0027Razrabotka.Testovyii.tr.Operaciya\u0027).get(\u0027Razrabotka.Operacii.PolnoeNaimenovanie\u0027));\r\n        if(getJournal(tableRec.get(\u0027Razrabotka.Testovyii.tr.Debet\u0027)))\r\n            posting.setProperty(JOURNAL, getJournal(tableRec.get(\u0027Razrabotka.Testovyii.tr.Debet\u0027)).getCode());\r\n        if(tableRec.get(\u0027Razrabotka.Testovyii.tr.Kolichestvo\u0027))\r\n            posting.setProperty(KOLVO, tableRec.get(\u0027Razrabotka.Testovyii.tr.Kolichestvo\u0027))\r\n\r\n        currentDocument.addPosting(posting);            \r\n    };\r\n    \r\n    //проверка проводок\r\n    let postingValidationResult \u003d hasNotValidPostings(currentDocument);\r\n    if (postingValidationResult) {\r\n        return postingValidationResult;\r\n    }\r\n\r\n        //устанавливаем текущую дату проводки\r\n        currentDocument.setExecuted();\r\n        //устанавливаем сумму операции\r\n        currentDocument.setOperationSum(getCalculatedSum(currentDocument, \u0027Razrabotka.Testovyii.tr.Summa\u0027));\r\n        //сохранение документа с проводками\r\n        currentDocument.save();\r\n}\r\n\r\n////Контроль проводок при проведении\r\n//function hasNotValidPostings(currentDocument) {\r\n//    \r\n//    let resultPostingValidate \u003d currentDocument.validate();\r\n//        \r\n//    \r\n//    //Проверка наличия проводок\r\n//    if(!currentDocument.getPostingList().size()){\r\n//        resultPostingValidate.addValueError(\u0027Проведение невозможно: не сформировано ни одной проводки.\u0027);\r\n//    }\r\n//    \r\n//    for (let postingRec of currentDocument.getPostingList()){\r\n//\r\n//        let debitAccountCode \u003d postingRec.getDebit().getCode();\r\n//        let creditAccountCode \u003d postingRec.getCredit().getCode();\r\n//    \r\n//        // 1. Пустой Дебет и/или Кредит\r\n//        if (debitAccountCode \u003d\u003d null || creditAccountCode \u003d\u003d null){\r\n//            resultPostingValidate.addValueError(\u0027Проведение невозможно: не указан счет дебета или счет кредита.\u0027);\r\n//            return  resultPostingValidate;\r\n//        }\r\n//        // 2. Пустой КПС дебет или КПС кредит или КВФО\r\n//        if (!postingRec.getProperty(KFO))\r\n//            resultPostingValidate.addValueError(\u0027Проведение невозможно: не указан КВФО.\u0027);\r\n//        if (!postingRec.getDebitProperty(KPS))\r\n//            resultPostingValidate.addValueError(\u0027Проведение невозможно: не указан КПС счета дебета.\u0027);\r\n//        if (!postingRec.getCreditProperty(KPS))\r\n//            resultPostingValidate.addValueError(\u0027Проведение невозможно: не указан КПС счета кредита.\u0027);\r\n//        // 3. Комбинация Баланса и забаланса\r\n//        let debitBalance \u003d debitAccountCode.length \u003e\u003d 5 \u0026\u0026 !debitAccountCode.includes(\u0027.\u0027);\r\n//        let creditBalance \u003d creditAccountCode.length \u003e\u003d 5 \u0026\u0026 !creditAccountCode.includes(\u0027.\u0027);\r\n//        if (debitBalance !\u003d creditBalance)\r\n//            resultPostingValidate.addValueError(\u0027Проведение невозможно: не допускается комбинация балансового (\u0027 + (debitBalance ? debitAccountCode : creditAccountCode) + \u0027) и забалансового (\u0027 + (!creditBalance ? creditAccountCode : debitAccountCode) + \u0027) счетов.\u0027);\r\n//        // 4. Сумма\u003d0 и кол-во \u003d0\r\n//        if ((!postingRec.getValue() || postingRec.getValue() \u003d\u003d 0) \u0026\u0026 (!postingRec.getProperty(KOLVO) || postingRec.getProperty(KOLVO) \u003d\u003d 0))\r\n//            resultPostingValidate.addValueError(\u0027Проведение невозможно: сумма и/или количество отсутствуют либо равны нулю.\u0027);\r\n//        // 5. Не заполнен № журнала операций (основной)\r\n//        if (!postingRec.getProperty(JOURNAL))\r\n//            resultPostingValidate.addValueError(\u0027Проведение невозможно: у счетов \u0027 + debitAccountCode + \u0027 и \u0027 + creditAccountCode + \u0027 отсутствуют номера журналов.\u0027);\r\n//        \r\n//        \r\n//        // 6. Какая то аналитика по дебету или кредиту не заполнена\r\n//        if(haveAllAnalitics(postingRec.getDebit(), resultPostingValidate))\r\n//            haveAllAnalitics(postingRec.getDebit(), resultPostingValidate);\r\n//        if(haveAllAnalitics(postingRec.getCredit(), resultPostingValidate))\r\n//            haveAllAnalitics(postingRec.getCredit(), resultPostingValidate);\r\n//    }\r\n//    if (resultPostingValidate.hasValueErrors())\r\n//        return  resultPostingValidate;\r\n//}\r\n//\r\n//\r\n////Контроль заполнения аналитик у счетов\r\n//function haveAllAnalitics(postingAccount, resultPostingValidate) {\r\n//    \r\n//    let analytics \u003d postingAccount.getAnalytics();\r\n//    let postingAccountCode \u003d postingAccount.getCode();\r\n//    \r\n//    if(!analytics.size){\r\n//        resultPostingValidate.addValueError(\u0027Проведение невозможно: не заданы аналитики для счета \u0027 + postingAccountCode);\r\n//    } else {\r\n//        let sourceMap \u003d new Map();\r\n//        for (let numberAnalitic of analytics.keySet()) {\r\n//            let mnemoAnalitic \u003d EntityFactory.getPlan().getAccounts().getAnalyticMnemo(postingAccountCode, numberAnalitic);\r\n//            let valueAnalitic \u003d analytics.get(numberAnalitic);\r\n//            sourceMap.set(mnemoAnalitic, valueAnalitic);\r\n//        }\r\n//        for (let count \u003d 0; count \u003c 3; count++) {\r\n//            let mnemoAnaliticFromPlan \u003d EntityFactory.getPlan().getAccounts().getAnalyticMnemo(postingAccountCode, count);\r\n//            if ((mnemoAnaliticFromPlan \u0026\u0026 mnemoAnaliticFromPlan !\u003d \u0027\u0027) \u0026\u0026 !sourceMap.has(mnemoAnaliticFromPlan)) {\r\n//                resultPostingValidate.addValueError(\u0027Проведение невозможно: для счета \u0027 + postingAccountCode + \u0027 не задана аналитика \u0027 + (count + 1));\r\n//            }\r\n//        }\r\n//    }\r\n//    return resultPostingValidate;\r\n//}"
  },
  "template": {
    "universal": false,
    "date": {
      "celltype": "OPERATION_DATE",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "number": {
      "celltype": "OPERATION_NUMBER",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "summ": {
      "celltype": "OPERATION_SUM",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operation_description": {
      "celltype": "OPERATION_DESCRIPTION",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operations": []
  },
  "runastemplate": false,
  "grants": {},
  "meta": {
    "mnemo": "TestB.Testovyii.2",
    "title": {
      "ru_RU": "2",
      "en_EN": "2"
    },
    "description": {}
  }
}