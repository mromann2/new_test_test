{
  "script": {
    "title": "script",
    "sources": "//Проведение документа\r\nfunction activate(currentDocument) {\r\n    let docMnemo \u003d currentDocument.getMnemo()  \r\n   \r\n    let documentValidateResult \u003d notValid(currentDocument)\r\n    if (documentValidateResult) {\r\n        return documentValidateResult;\r\n    }\r\n\r\n    for (let tableRec of currentDocument.getRows()){\r\n        \r\n        let docDebitAccount \u003d tableRec.get(docMnemo + \u0027.tr.Debet\u0027);\r\n        let docCreditAccount \u003d tableRec.get(docMnemo + \u0027.tr.Kredit\u0027);\r\n        let isDebitAvans \u003d Boolean(EntityFactory.getCatalogs()\r\n                                        .get(MODULEMNEMO + \".SootvetstviyaSchetov\")\r\n                                        .findByRequisite(MODULEMNEMO + \u0027.SootvetstviyaSchetov.SchetAvansa\u0027, docDebitAccount)[0]);\r\n        \r\n        //1. типовая проводка\r\n        currentDocument.addPosting(createPostingWithProps({\r\n            tableRec, \r\n            currentDocument,\r\n        }));\r\n\r\n        //2. проводка если Дебет является счетом аванса из справочника \"Соответствия счетов\"\r\n        if (isDebitAvans){\r\n            let debit30304 \u003d fillAccountByAnalytics(EntityFactory.getPlan().getAccounts().findByCode(\u002730304\u0027).get(0), docDebitAccount)\r\n            let credit21011 \u003d fillAccountByAnalytics(EntityFactory.getPlan().getAccounts().findByCode(\u002721011\u0027).get(0), docCreditAccount);\r\n\r\n            currentDocument.addPosting(createPostingWithProps({\r\n                tableRec,\r\n                currentDocument,\r\n                debitKps: tableRec.get(docMnemo +  \u0027.tr.KPSKr\u0027).getCode(),\r\n                debit: debit30304,\r\n                creditKps: currentDocument.get(docMnemo + \u0027.hr.KPSDlyaScheta334\u0027)?.getCode(),\r\n                credit: credit21011,\r\n                summa: tableRec.get(docMnemo +  \u0027.tr.SummaNDS\u0027),\r\n            }));\r\n        }\r\n    }\r\n    \r\n    let postingsValidateResult \u003d hasNotValidPostings(currentDocument)\r\n    if(postingsValidateResult){\r\n        return postingsValidateResult;\r\n    }\r\n\r\n    currentDocument.setExecuted();\r\n    currentDocument.setOperationSum(getCalculatedSum(currentDocument, docMnemo + \u0027.tr.Summa\u0027));\r\n    currentDocument.save();\r\n}"
  },
  "template": {
    "universal": false,
    "date": {
      "celltype": "OPERATION_DATE",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "number": {
      "celltype": "OPERATION_NUMBER",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "summ": {
      "celltype": "OPERATION_SUM",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operation_description": {
      "celltype": "OPERATION_DESCRIPTION",
      "formulaEnabled": "true",
      "sourceMnemo": "",
      "prompt": {},
      "index": 0
    },
    "operations": []
  },
  "runastemplate": false,
  "grants": {},
  "meta": {
    "mnemo": "Kassa.PlatezhnyePorucheniyaspisanieSoScheta.UchPPs",
    "title": {
      "ru_RU": "УчППс",
      "en_EN": "UchPPs"
    },
    "description": {}
  }
}